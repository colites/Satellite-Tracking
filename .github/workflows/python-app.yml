# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: Satellite_project
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with unittest
      run: |
         python -m unittest WebApplication.Backend.test.web_application_test
         python -m unittest DataCollector.test.data_collector_test 
         python -m unittest DataAnalyzer.test.data_analyzer_test

  integration-test-linux:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: satellites_proj
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: kays1234
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --hostname rabbitmq
          --health-cmd "rabbitmqctl status"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
          
    defaults:
      run:
        working-directory: Satellite_project
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.11
        uses: actions/setup-python@v3
        with:
          python-version: "3.11"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Start services and run integration tests
        run: |
         python message_queue.py run &
         flask --app DataCollector.src.data_collector run --port 5003 &
         flask --app WebApplication.Frontend.front_app run --port 5000 &
         flask --app WebApplication.Backend.app run --port 5001 &
         flask --app DataAnalyzer.src.data_analyzer run --port 5002 &
         sleep 10
         python -m unittest test.integration-tests
